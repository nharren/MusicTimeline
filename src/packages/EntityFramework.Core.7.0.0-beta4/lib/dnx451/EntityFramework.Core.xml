<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Data.Entity.DbContext">
            <summary>
                A DbContext instance represents a session with the data store and can be used to query and save
                instances of your entities. DbContext is a combination of the Unit Of Work and Repository patterns.
            </summary>
            <remarks>
                <para>
                    Typically you create a class that derives from DbContext and contains <see cref="T:Microsoft.Data.Entity.DbSet`1" />
                    properties for each entity in the model. If the <see cref="T:Microsoft.Data.Entity.DbSet`1" /> properties have a public setter,
                    they are automatically initialized when the instance of the derived context is created.
                </para>
                <para>
                    Override the <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method to configure the data store (and other
                    options) to be
                    used for the context.
                </para>
                <para>
                    The model is discovered by running a set of conventions over the entity classes found in the
                    <see cref="T:Microsoft.Data.Entity.DbSet`1" />
                    properties on the derived context. To further configure the model that is discovered by convention, you can
                    override the <see cref="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)" /> method.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContext" /> class. The
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" />
                method will be called to configure the data store (and other options) to be used for this context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.#ctor(System.IServiceProvider)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContext" /> class using an <see cref="T:System.IServiceProvider" />.
                </para>
                <para>
                    The service provider must contain all the services required by Entity Framework (and the data store being
                    used).
                    The Entity Framework services can be registered using the
                    <see cref="M:Microsoft.Framework.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Framework.DependencyInjection.IServiceCollection)" /> method.
                    Most data stores also provide an extension method on <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" /> to register the services
                    required.
                </para>
                <para>
                    If the <see cref="T:System.IServiceProvider" /> has a <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> or
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1" />
                    registered, then this will be used as the options for this context instance. The <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" />
                    method
                    will still be called to allow further configuration of the options.
                </para>
            </summary>
            <param name="serviceProvider">The service provider to be used.</param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.#ctor(Microsoft.Data.Entity.Infrastructure.DbContextOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContext" /> with the specified options. The
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method will still be called to allow further
                configuration of the options.
            </summary>
            <param name="options">The options for this context.</param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.#ctor(System.IServiceProvider,Microsoft.Data.Entity.Infrastructure.DbContextOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContext" /> class using an <see cref="T:System.IServiceProvider" />
                and the specified options.
                <para>
                    The <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method will still be called to allow further
                    configuration of the options.
                </para>
                <para>
                    The service provider must contain all the services required by Entity Framework (and the data store being
                    used).
                    The Entity Framework services can be registered using the
                    <see cref="M:Microsoft.Framework.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Framework.DependencyInjection.IServiceCollection)" /> method.
                    Most data stores also provide an extension method on <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" /> to register the services
                    required.
                </para>
                <para>
                    If the <see cref="T:System.IServiceProvider" /> has a <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> or
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1" />
                    registered, then this will be used as the options for this context instance. The <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" />
                    method
                    will still be called to allow further configuration of the options.
                </para>
            </summary>
            <param name="serviceProvider">The service provider to be used.</param>
            <param name="options">The options for this context.</param>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContext.Microsoft#Data#Entity#Infrastructure#IAccessor{System#IServiceProvider}#Service">
            <summary>
                <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)">
            <summary>
                Override this method to configure the data store (and other options) to be used for this context.
                This method is called for each instance of the context that is created.
            </summary>
            <remarks>
                If you passed an instance of <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> to the constructor of the context (or
                provided an <see cref="T:System.IServiceProvider" /> with <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> registered) then
                it is cloned before being passed to this method. This allows the options to be altered without
                affecting other context instances that are constructed with the same <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" />
                instance.
            </remarks>
            <param name="optionsBuilder">
                A builder used to create or modify options for this context. Data stores (and other extensions)
                typically define extension methods on this object that allow you to configure the context.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)">
            <summary>
                Override this method to further configure the model that was discovered by convention from the entity types
                exposed in <see cref="T:Microsoft.Data.Entity.DbSet`1" /> properties on your derived context. The resulting model may be cached
                and re-used for subsequent instances of your derived context.
            </summary>
            <param name="modelBuilder">
                The builder being used to construct the model for this context. Data stores (and other extensions) typically
                define extension methods on this object that allow you to configure aspects of the model that are specific
                to a given data store.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.SaveChanges">
            <summary>
                Saves all changes made in this context to the underlying data store.
            </summary>
            <remarks>
                This method will automatically call <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any changes
                to entity instances before saving to the underlying data store. This can be disabled via
                <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
            </remarks>
            <returns>
                The number of state entries written to the underlying data store.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously saves all changes made in this context to the underlying data store.
            </summary>
            <remarks>
                <para>
                    This method will automatically call <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any changes
                    to entity instances before saving to the underlying data store. This can be disabled via
                    <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
                <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of state entries written to the underlying data store.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Dispose">
            <summary>
                Releases the allocated resources for this context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Entry``1(``0)">
            <summary>
                Gets an <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the given entity providing access to
                information the context is tracking for the given the entity and the ability
                to perform actions on the entity.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to get the entry for. </param>
            <returns> The entry for the given entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Entry(System.Object)">
            <summary>
                <para>
                    Gets an <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the given entity. The entry provides 
                    access to change tracking information and operations for the entity.
                </para>
                <para>
                    This method may be called on an entity that is not tracked. You can then
                    set the <see cref="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.State"/> property on the returned entry
                    to have the context begin tracking the entity in the specified state.
                </para>
            </summary>
            <param name="entity"> The entity to get the entry for. </param>
            <returns> The entry for the given entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Add``1(``0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that it will
                be inserted into the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to add. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Attach``1(``0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to attach. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Update``1(``0)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that it will
                    be updated in the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbContext.Attach``1(``0)" /> to begin tracking the entity in the
                    <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> to mark the desired properties as modified.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to update. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Remove``1(``0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that it will
                be removed from the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If the entity is already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking the entity (rather than marking it as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since the
                entity was previously added to the context and does not exist in the data store.
            </remarks>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to remove. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Add(System.Object)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that it will
                be inserted into the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entity"> The entity to add. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Attach(System.Object)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entity"> The entity to attach. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Update(System.Object)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that it will
                    be updated in the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbContext.Attach(System.Object)" /> to begin tracking the entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entity"> The entity to update. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Remove(System.Object)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that it will
                be removed from the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If the entity is already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking the entity (rather than marking it as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since the
                entity was previously added to the context and does not exist in the data store.
            </remarks>
            <param name="entity"> The entity to remove. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.AddRange(System.Object[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that they will
                be inserted into the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.AttachRange(System.Object[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.UpdateRange(System.Object[])">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that they will
                    be updated in the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entities will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbContext.Attach(System.Object)" /> to begin tracking each entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.RemoveRange(System.Object[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that they will
                be removed from the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If any of the entities are already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking those entities (rather than marking them as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since those
                entities were previously added to the context and do not exist in the data store.
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that they will
                be inserted into the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.UpdateRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that they will
                    be updated in the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entities will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbContext.Attach(System.Object)" /> to begin tracking each entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.RemoveRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that they will
                be removed from the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If any of the entities are already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking those entities (rather than marking them as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since those
                entities were previously added to the context and do not exist in the data store.
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContext.Database">
            <summary>
                Provides access to database related information and operations for this context.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContext.ChangeTracker">
            <summary>
                Provides access to information and operations for entity instances this context is tracking.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContext.Model">
            <summary>
                The metadata about the shape of entities and relationships between them.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Set``1">
            <summary>
                Creates a set to perform operations for a given entity type in the model. LINQ queries against
                <see cref="T:Microsoft.Data.Entity.DbSet`1" /> will be translated into queries against the data store.
            </summary>
            <typeparam name="TEntity"> The type of entity for which a set should be returned. </typeparam>
            <returns> A set for the given entity type. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.DbSet`1">
            <summary>
                <para>
                    A DbSet allows operations to be performed for a given entity type. LINQ queries against
                    <see cref="T:Microsoft.Data.Entity.DbSet`1" /> will be translated into queries against the data store.
                </para>
                <para>
                    The results of a LINQ query against a <see cref="T:Microsoft.Data.Entity.DbSet`1" /> will contain the results
                    returned from the data store and may not reflect changes made in the context that have not
                    been persisted to the store. For example, the results will not contain newly added entities
                    and may still contain entities that are marked for deletion.
                </para>
                <para>
                    <see cref="T:Microsoft.Data.Entity.DbSet`1" /> objects are usually obtained from a <see cref="T:Microsoft.Data.Entity.DbSet`1" />
                    property on a derived <see cref="T:Microsoft.Data.Entity.DbContext" /> or from the <see cref="M:Microsoft.Data.Entity.DbContext.Set``1" />
                    method.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being operated on by this set. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.Add(`0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that it will
                be inserted into the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entity"> The entity to add. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.Attach(`0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entity"> The entity to attach. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.Remove(`0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that it will
                be removed from the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If the entity is already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking the entity (rather than marking it as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since the
                entity was previously added to the context and does not exist in the data store.
            </remarks>
            <param name="entity"> The entity to remove. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.Update(`0)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that it will
                    be updated in the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbSet`1.Attach(`0)" /> to begin tracking the entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entity"> The entity to update. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. This entry provides access to
                information the context is tracking for the entity and the ability to perform
                actions on the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.AddRange(`0[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that they will
                be inserted into the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.AttachRange(`0[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.RemoveRange(`0[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that they will
                be removed from the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If any of the entities are already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking those entities (rather than marking them as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since those
                entities were previously added to the context and do not exist in the data store.
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.UpdateRange(`0[])">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that they will
                    be updated in the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entities will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbSet`1.Attach(`0)" /> to begin tracking each entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that they will
                be inserted into the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.AttachRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that they will
                be removed from the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If any of the entities are already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking those entities (rather than marking them as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since those
                entities were previously added to the context and do not exist in the data store.
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that they will
                    be updated in the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entities will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbSet`1.Attach(`0)" /> to begin tracking each entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> which when enumerated will execute the query against the data store.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.IEnumerator" /> which when enumerated will execute the query against the data store.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.Microsoft#Data#Entity#Query#IAsyncEnumerableAccessor{TEntity}#AsyncEnumerable">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> which when enumerated will asynchronously execute the query against
                the data store.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#ElementType">
            <summary>
                Gets the IQueryable element type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#Expression">
            <summary>
                Gets the IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#Provider">
            <summary>
                Gets the IQueryable provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.Microsoft#Data#Entity#Infrastructure#IAccessor{System#IServiceProvider}#Service">
            <summary>
                <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.Microsoft#Data#Entity#Infrastructure#IAnnotatableQueryable{TEntity}#AnnotateQuery(System.Object)">
            <summary>
                <para>
                    Adds a <see cref="T:Microsoft.Data.Entity.Query.QueryAnnotation"/> to the query.
                </para>
                <para>
                    This method is intended for use by extension methods that need to add information to
                    the expression tree.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.EntityState">
            <summary>
                The state in which an entity is being tracked by a context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Detached">
            <summary>
                The entity is not being tracked by the context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Unchanged">
            <summary>
                The entity is being tracked by the context and exists in the database. Its property
                values have not changed from the values in the database.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Deleted">
            <summary>
                The entity is being tracked by the context and exists in the database. It has been marked
                for deletion from the database.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Modified">
            <summary>
                The entity is being tracked by the context and exists in the database. Some or all of its
                property values have been modified.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Added">
            <summary>
                The entity is being tracked by the context but does not yet exist in the database.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ModelBuilder">
            <summary>
                <para>
                    Provides a simple API surface for configuring a <see cref="P:Microsoft.Data.Entity.ModelBuilder.Model" /> that defines the shape of your
                    entities and how they map to the data store.
                </para>
                <para>
                    You can use <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> to construct a model for a context by overriding
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)" /> or creating a <see cref="P:Microsoft.Data.Entity.ModelBuilder.Model" />
                    externally
                    and setting is on a <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> instance that is passed to the context
                    constructor.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.#ctor(Microsoft.Data.Entity.Metadata.ModelConventions.ConventionSet)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> class that will
                apply a set of conventions. Consider using a <see cref="T:Microsoft.Data.Entity.Metadata.Builders.IModelBuilderFactory" /> to
                create a ModelBuilder with appropriate conventions configured.
            </summary>
            <param name="conventions"> The conventions to be applied to the model. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.#ctor(Microsoft.Data.Entity.Metadata.ModelConventions.ConventionSet,Microsoft.Data.Entity.Metadata.Model)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> class that will
                configure an existing model and apply a set of conventions. Consider using a
                <see cref="T:Microsoft.Data.Entity.Metadata.Builders.IModelBuilderFactory" /> to create a ModelBuilder with appropriate
                conventions configured.
            </summary>
            <param name="conventions"> The conventions to be applied to the model. </param>
            <param name="model"> The model to be configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ModelBuilder.Model">
            <summary>
                The model being configured.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the model. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same typeBuilder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.ModelBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalModelBuilder}#Service">
            <summary>
                The internal typeBuilder being used to configure this model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity``1">
            <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity(System.Type)">
            <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
            <param name="type"> The entity type to be configured. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity``1(System.Action{Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder{``0}})">
            <summary>
                <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.Data.Entity.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <param name="buildAction"> An action that performs configuration of the entity type. </param>
            <returns>
                The same typeBuilder instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity(System.Type,System.Action{Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder})">
            <summary>
                <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.Data.Entity.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
            </summary>
            <param name="type"> The entity type to be configured. </param>
            <param name="buildAction"> An action that performs configuration of the entity type. </param>
            <returns>
                The same typeBuilder instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Ignore``1">
            <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
            <typeparam name="TEntity"> The  entity type to be removed from the model. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Ignore(System.Type)">
            <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
            <param name="type"> The entity type to be removed from the model. </param>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker">
            <summary>
                Provides access to change tracking information and operations for entity instances the context is tracking.
                Instances of this class are typically obtained from <see cref="P:Microsoft.Data.Entity.DbContext.ChangeTracker"/> and it is not designed 
                to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.#ctor(Microsoft.Data.Entity.ChangeTracking.Internal.IStateManager,Microsoft.Data.Entity.ChangeTracking.Internal.IChangeDetector,Microsoft.Data.Entity.ChangeTracking.Internal.IEntityEntryGraphIterator,Microsoft.Data.Entity.DbContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/> class. Instances of this class are typically
                obtained from <see cref="P:Microsoft.Data.Entity.DbContext.ChangeTracker"/> and it is not designed to be directly constructed 
                in your application code.
            </summary>
            <param name="stateManager"> The internal state manager being used to store information about tracked entities. </param>
            <param name="changeDetector"> The internal change detector used to identify changes in tracked entities. </param>
            <param name="graphIterator"> The internal graph iterator used to traverse graphs of entities. </param>
            <param name="context"> The context this change tracker belongs to. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled">
            <summary>
                <para>
                    Gets or sets a value indicating whether the <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> method is called automatically 
                    by methods of <see cref="T:Microsoft.Data.Entity.DbContext" /> and related classes.
                </para>
                <para>
                    The default value is true. This ensures the context is aware of any changes to tracked entity instances before performing
                    operations such as <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/> or returning change tracking information. If you disable automatic
                    detect changes then you must ensure that <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges"/> is called when entity instances have been modified.
                    Failure to do so may result in some changes not being persisted during <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/> or out-of-date
                    change tracking information being returned.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.Entries">
            <summary>
                Gets an <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for each entity being tracked by the context.
                The entries provide access to change tracking information and operations for each entity.
            </summary>
            <returns> An entry for each entity being tracked. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.Entries``1">
            <summary>
                Gets an <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for all entities of a given type being tracked by the context.
                The entries provide access to change tracking information and operations for each entity.
            </summary>
            <typeparam name="TEntity"> The type of entities to get entries for. </typeparam>
            <returns> An entry for each entity of the given type that is being tracked. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#ChangeTracking#Internal#IStateManager}#Service">
            <summary>
                Gets the internal state manager being used to store information about tracked entities.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.Context">
            <summary>
                Gets the context this change tracker belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges">
            <summary>
                Scans the tracked entity instances to detect any changes made to the instance data. <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges"/>
                is usually called automatically by the context when up-to-date information is required (before <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/> 
                and when returning change tracking information). You typically only need to call this method if you have disabled
                <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.TrackGraph(System.Object,System.Action{Microsoft.Data.Entity.ChangeTracking.EntityEntry})">
            <summary>
                <para>
                    Begins tracking an entity and any entities that are reachable by traversing it's navigation properties. Traversal 
                    is recursive so the navigation properties of any discovered entities will also be scanned. The specified
                    <paramref name="callback"/> is called for each discovered entity and must set the <see cref="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.State"/>
                    that each entity should be tracked in. If no state is set, the entity remains untracked.
                </para>
                <para>
                    This method is designed for use in disconnected scenarios where entities are retrieved using one instance of the context
                    and then changes are saved using a different instance of the context. An example of this is a web service where one service
                    call retrieves entities from the data store and another service call persists any changes to the entities. Each service call
                    uses a new instance of the context that is disposed when the call is complete.
                </para>
                <para>
                    If an entity is discovered that is already tracked by the context, that entity is not processed (and it's
                    navigation properties are not traversed).
                </para>
            </summary>
            <param name="rootEntity"> The entity to begin traversal from. </param>
            <param name="callback"> 
                An action to configure the change tracking information for each entity. For the entity to begin being tracked,
                the <see cref="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.State"/> must be set.
            </param>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given entity.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/> API and it is 
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntry.#ctor(Microsoft.Data.Entity.DbContext,Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry"/> class. Instances of this class are returned from 
                methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/> API and it is not designed to be directly constructed in 
                your application code.
            </summary>
            <param name="context"> The context that is tracking the entity. </param>
            <param name="internalEntry"> The internal entry tracking information about this entity. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Entity">
            <summary>
                Gets the entity being tracked by this entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.State">
            <summary>
                <para>
                    Gets or sets that state that this entity is being tracked in.
                </para>
                <para>
                    When setting the state, the entity will always end up in the specified state. For example, if you
                    change the state to <see cref="F:Microsoft.Data.Entity.EntityState.Deleted"/> the entity will be marked for deletion regardless
                    of its current state. This is different than calling <see cref="M:Microsoft.Data.Entity.DbSet`1.Remove(`0)"/> where the entity
                    will be disconnected (rather than marked for deletion) if it is in the <see cref="F:Microsoft.Data.Entity.EntityState.Added"/> state.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#ChangeTracking#Internal#InternalEntityEntry}#Service">
            <summary>
                Gets the internal entry that is tracking information about this entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Context">
            <summary>
                Gets the context that is tracking the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Metadata">
            <summary>
                Gets the metadata the context is using to reason about this entity.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Property(System.String)">
            <summary>
                Provides access to change tracking information and operations for a given
                property of this entity.
            </summary>
            <param name="propertyName"> The property to access information and operations for. </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.IsKeySet">
            <summary>
                <para>
                    Gets a value indicating if the key values of this entity have been assigned a value.
                    False if one or more of the key properties is assigned null or <see cref="P:Microsoft.Data.Entity.Metadata.IProperty.SentinelValue"/>, 
                    otherwise true.
                </para>
                <para>
                    By default <see cref="P:Microsoft.Data.Entity.Metadata.IProperty.SentinelValue"/> is set to the CLR default for the type of
                    the property (i.e. null for string, 0 for int, etc.)
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given entity.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/> API and it is 
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being tracked by this entry. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.#ctor(Microsoft.Data.Entity.DbContext,Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1"/> class. Instances of this class are returned from 
                methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/> API and it is not designed to be directly constructed in 
                your application code.
            </summary>
            <param name="context"> The context that is tracking the entity. </param>
            <param name="internalEntry"> The internal entry tracking information about this entity. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.Entity">
            <summary>
                Gets the entity being tracked by this entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Provides access to change tracking information and operations for a given
                property of this entity.
            </summary>
            <param name="propertyExpression"> 
                A lambda expression representing the property to access information and operations for
                (<c>t => t.Property1</c>). 
            </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.PropertyEntry">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/> API and it is 
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.#ctor(Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.PropertyEntry"/> class. Instances of this class 
                are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/> API and it is not designed 
                to be directly constructed in your application code.
            </summary>
            <param name="internalEntry">  The internal entry tracking information about the entity the property belongs to. </param>
            <param name="name"> The name of the property. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.IsModified">
            <summary>
                Gets or sets a value indicating whether the value of this property has been modified
                and should be updated in the data store when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/>
                is called.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.Metadata">
            <summary>
                Gets the metadata the context is using to reason about this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.CurrentValue">
            <summary>
                Gets or sets the value currently assigned to this property. If the current value is set using this property, 
                the change tracker is aware of the change and <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges"/> is not required 
                for the context to be aware of the change.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.OriginalValue">
            <summary>
                Gets or sets the value that was assigned to this property when it was retrieved from the data store.
                This property is populated when an entity is retrieved from the data store, but setting it may be 
                useful in disconnected scenarios where entities are retrieved with one context instance and
                saved with a different context instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.PropertyEntry`2">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/> API and it is 
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity the property belongs to. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.PropertyEntry`2.#ctor(Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.PropertyEntry`2"/> class. Instances of this class 
                are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/> API and it is not designed 
                to be directly constructed in your application code.
            </summary>
            <param name="internalEntry">  The internal entry tracking information about the entity the property belongs to. </param>
            <param name="name"> The name of the property. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.ArraySidecar.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.ChangeDetector.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.DictionarySidecar.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.InternalClrEntityEntry.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.InternalMixedEntityEntry.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.InternalShadowEntityEntry.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.NavigationFixer.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.OriginalValues.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.RelationshipsSnapshot.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.Sidecar.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.Internal.StoreGeneratedValues.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder">
            <summary>
                Provides Entity Framework specific APIs for configuring services in an <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" />.
                These APIs are usually accessed by calling
                <see cref="M:Microsoft.Framework.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Framework.DependencyInjection.IServiceCollection)" />
                and then chaining API calls on the returned <see cref="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder.#ctor(Microsoft.Framework.DependencyInjection.IServiceCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder" /> class.
            </summary>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" /> being configured. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder.AddDbContext``1(System.Action{Microsoft.Data.Entity.DbContextOptionsBuilder})">
            <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
            <remarks>
                This method will ensure services that the context uses are resolved from the
                <see cref="T:System.IServiceProvider" /> and any Entity Framework configuration
                found in the configuration passed to <see cref="M:Microsoft.Framework.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Framework.DependencyInjection.IServiceCollection)" />
                extension method will be honored.
            </remarks>
            <typeparam name="TContext"> The type of context to be registered. </typeparam>
            <param name="optionsAction">
                <para>
                    An optional action to configure the <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
                <para>
                    If an action is supplied here, the <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
                <para>
                    You do not need to expose a constructor parameter for the <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> to be passed to the
                    context. If you choose to expose a constructor parameter, you must type it as the generic
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1" /> as that is the type that will be registered in the
                    <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" /> (in order to support multiple context types being registered in the
                    same <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" />).
                </para>
            </param>
            <returns>
                A builder that allows further Entity Framework specific setup of the <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" />.
            </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Framework#DependencyInjection#IServiceCollection}#Service">
            <summary>
                Gets the <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" /> being configured.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ArgumentIsEmpty(System.Object)">
            <summary>
            The string argument '{argumentName}' cannot be empty.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.CircularDependency(System.Object)">
            <summary>
            A circular dependency was detected: {cycle}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.InvalidEnumValue(System.Object,System.Object)">
            <summary>
            The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.InvalidPropertiesExpression(System.Object)">
            <summary>
            The properties expression '{expression}' is not valid. The expression should represent a property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.InvalidPropertyExpression(System.Object)">
            <summary>
            The expression '{expression}' is not a valid property expression. The expression should represent a property access: 't =&gt; t.MyProperty'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.IdentityConflict(System.Object)">
            <summary>
            The instance of entity type '{entityType}' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.InvalidPrimaryKey(System.Object)">
            <summary>
            The instance of entity type '{entityType}' cannot be tracked because it has an invalid (e.g. null or CLR default) primary key. Either set the key explicitly or consider using an IValueGenerator to generate unique key values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.WrongStateManager(System.Object)">
            <summary>
            Cannot start tracking InternalEntityEntry for entity type '{entityType}' because it was created by a different StateManager instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.MultipleEntries(System.Object)">
            <summary>
            Cannot start tracking InternalEntityEntry for entity type '{entityType}' because another InternalEntityEntry is already tracking the same entity.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.EntityTypeNotFound(System.Object)">
            <summary>
            The entity type '{entityType}' was not found. Ensure that the entity type has been added to the model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.PropertyNotFound(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists and has been included in the model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.EmptySequence">
            <summary>
            Sequence contains no elements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.MoreThanOneElement">
            <summary>
            Sequence contains more than one element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.MoreThanOneMatch">
            <summary>
            Sequence contains more than one matching element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.NoMatch">
            <summary>
            Sequence contains no matching element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.CollectionArgumentIsEmpty(System.Object)">
            <summary>
            The collection argument '{argumentName}' must contain at least one element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.InconsistentEntityType(System.Object)">
            <summary>
            The properties provided for the argument '{argumentName}' are declared on different entity types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.EntityRequiresKey(System.Object)">
            <summary>
            The entity type '{entityType}' requires a key to be defined.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.KeyPropertiesWrongEntity(System.Object,System.Object)">
            <summary>
            The specified key properties {key} are not declared on the entity type '{entityType}'. Ensure key properties are declared on the target entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ForeignKeyPropertiesWrongEntity(System.Object,System.Object)">
            <summary>
            The specified foreign key properties {foreignKey} are not declared on the entity type '{entityType}'. Ensure foreign key properties are declared on the target entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.IndexPropertiesWrongEntity(System.Object,System.Object)">
            <summary>
            The specified index properties {index} are not declared on the entity type '{entityType}'. Ensure index properties are declared on the target entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.IQueryableNotAsync(System.Object)">
            <summary>
            The source IQueryable doesn't implement IAsyncEnumerable&lt;{genericParameter}&gt;. Only sources that implement IAsyncEnumerable can be used for Entity Framework asynchronous operations.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.IQueryableProviderNotAsync">
            <summary>
            The provider for the source IQueryable doesn't implement IAsyncQueryProvider. Only providers that implement IEntityQueryProvider can be used for Entity Framework asynchronous operations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.EagerOriginalValuesRequired(System.Object)">
            <summary>
            Lazy original value tracking cannot be turned on for entity type '{entityType}'. Entities that do not implement both INotifyPropertyChanging and INotifyPropertyChanged require original values to be stored eagerly in order to correct detect changes made to entities.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.OriginalValueNotTracked(System.Object,System.Object)">
            <summary>
            The original value for property '{property}' of entity type '{entityType}' cannot be accessed because it is not being tracked. To access all original values set 'UseLazyOriginalValues' to false on the entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.MissingBackingField(System.Object,System.Object,System.Object)">
            <summary>
            The property '{entityType}.{property}' is annotated with backing field '{field}' but that field cannot be found.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.BadBackingFieldType(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The annotated backing field '{field}' of type '{fieldType}' cannot be used for the property '{entityType}.{property}' of type '{propertyType}'. Only backing fields of types that are assignable from the property type can be used.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NoFieldOrSetter(System.Object,System.Object)">
            <summary>
            No backing field could be discovered for property '{entityType}.{property}' and the property does not have a setter. Either use a backing field name that can be matched by convention, annotate the property with a backing field, or define a property setter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NoClrType(System.Object)">
            <summary>
            The CLR entity materializer cannot be used for entity type '{entityType}' because it is a shadow-state entity type.  Materialization to a CLR type is only possible for entity types that have a corresponding CLR type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.MultipleDataStoresConfigured(System.Object)">
            <summary>
            The data stores {storeNames}are configured. A context can only be configured to use a single data store.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.NoDataStoreConfigured">
            <summary>
            No data stores are configured. Configure a data store by overriding OnConfiguring in your DbContext class or in the AddDbContext method when setting up services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.NoDataStoreService">
            <summary>
            No data stores are available. Ensure that data store services are added inside the call to AddEntityFramework on your ServiceCollection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.MultipleDataStoresAvailable(System.Object)">
            <summary>
            The data stores {storeNames}are available. A context can only be configured to use a single data store. Configure a data store by overriding OnConfiguring in your DbContext class or in the AddDbContext method when setting up services.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.MultiplePropertiesMatchedAsKeys(System.Object,System.Object)">
            <summary>
            Multiple potential primary key properties named '{property}' but differing only by case were found on entity type '{entityType}'. Configure the primary key explicitly using the SetKey fluent API.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NoValueGenerator(System.Object,System.Object,System.Object)">
            <summary>
            The '{propertyName}' on entity type '{entityType}' does not have a value set and no value generator is available for properties of type '{propertyType}'. Either set a value for the property before adding the entity or configure a value generator for properties of type '{propertyType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.TempValuePersists(System.Object,System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' has a temporary value while attempting to change the entity's state to '{state}'. Either set a permanent value explicitly or ensure that the data store is configured to generate values for this property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.PropertyWithStorageNameNotFound(System.Object,System.Object)">
            <summary>
            A property with the storage name '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists, has been included in the model, and has been configured with storage name specified.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.CurrentValuesAlwaysInSync">
            <summary>
            CurrentValues are always in sync with the entity state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.DataStoreException">
            <summary>
            An error occured while running a data store operation. See InnerException for details.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.DebugLogWarning(System.Object,System.Object,System.Object)">
            <summary>
            {debug} level logging is enabled.  At this level, Entity Framework will log sensitive application data such as Sql parameter values.  To hide this information configure {minimumLevel} to {recommendedLevel}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.LogExceptionDuringQueryIteration(System.Object,System.Object)">
            <summary>
            An exception occurred in the data store while iterating the results of a query.{newline}{error}
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.LogExceptionDuringSaveChanges(System.Object,System.Object)">
            <summary>
            An exception occurred in the data store while saving changes.{newline}{error}
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.PropertyExtensionInvoked">
            <summary>
            The Property&lt;T&gt; extension method may only be used within LINQ queries.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.DuplicateProperty(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot be added to the entity type '{entityType}' because a property with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NoClrProperty(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot exist on entity type '{entityType}' because the property is not marked as shadow state and no corresponding CLR property exists on the underlying type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.PropertyWrongClrType(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot exist on entity type '{entityType}' because the property is not marked as shadow state and the type of the corresponding CLR property does not match the type specified in the property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ClrPropertyOnShadowEntity(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot exist on entity type '{entityType}' because the entity type is marked as shadow state while the property is not. Shadow state entity types can only contain shadow state properties.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.PropertyInUse(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot be removed from entity type '{entityType}' because it is being used in an index or key. All indexes and keys must be removed or redefined before the property can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.KeyInUse(System.Object,System.Object,System.Object)">
            <summary>
            Cannot remove key {key} from entity type '{entityType}' because it is referenced by a foreign key in entity type '{dependentType}'. All foreign keys must be removed or redefined before the referenced key can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ForeignKeyInUse(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Cannot remove foreign key {foreignKey} from entity type '{entityType}' because it is referenced by navigation property '{navigation}' in entity type '{dependentType}'. All navigations must be removed or redefined before the referenced foreign key can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationAlreadyOwned(System.Object,System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because it already belongs to entity type '{existingEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.DuplicateNavigation(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because a navigation property with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationOnShadowEntity(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to entity type '{entityType}' because the entity type is defined in shadow state and navigations properties cannot be added to shadow state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NoClrNavigation(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to entity type '{entityType}' because there is no corresponding CLR property on the underlying type and navigations properties cannot be added to shadow state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationSingleWrongClrType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to entity type '{entityType}' because its CLR type '{clrType}' does not match the expected CLR type '{targetType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationCollectionWrongClrType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The collection navigation property '{navigation}' cannot be added to entity type '{entityType}' because its CLR type '{clrType}' does not implement 'IEnumerable&lt;{targetType}&gt;'. Collection navigation properties must implement IEnumerable&lt;&gt; of the related entity.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationNotFound(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' on entity type '{entityType}' could not be found. Ensure that the navigation property exists and has been included in the model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.MultipleNavigations(System.Object,System.Object,System.Object)">
            <summary>
            The navigation properties '{navigation1}' and '{navigation2}' on entity type '{entityType}' are both backed by the same foreign key and point in the same direction. Each foreign key can have at most one navigation property and one inverse navigation property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ForeignKeyCountMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The number of properties specified for the foreign key {foreignKey} on entity type '{dependentType}' does not match the number of properties in the principal key {principalKey} on entity type '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ForeignKeyTypeMismatch(System.Object,System.Object,System.Object)">
            <summary>
            The types of the properties specified for the foreign key {foreignKey} on entity type '{dependentType}' do not match the types of the properties in the principal key on entity type '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationBadType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The type of navigation property '{navigation}' on entity type '{entityType}' is '{foundType}' which does not implement ICollection&lt;{targetType}&gt;. Collection navigation properties must implement ICollection&lt;&gt; of the target type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationArray(System.Object,System.Object,System.Object)">
            <summary>
            The type of navigation property '{navigation}' on entity type '{entityType}' is '{foundType}' which is an array type.. Collection navigation properties cannot be arrays.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationNoGetter(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' on entity type '{entityType}' does not have a getter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationNoSetter(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' on entity type '{entityType}' does not have a setter. Read-only collection navigation properties must be initialized before use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationCannotCreateType(System.Object,System.Object,System.Object)">
            <summary>
            The type of navigation property '{navigation}' on entity type '{entityType}' is '{foundType}' for which it was not possible to create a concrete instance. Either initialize the property before use, add a public parameterless constructor to the type, or use a type which can be assigned a HashSet&lt;&gt; or List&lt;&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.PropertyReadOnly(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' is read-only and so cannot be modified or marked as modified.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.KeyPropertyMustBeReadOnly(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' cannot be marked as read-write because it is part of a key. Key properties are always read-only.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.DuplicateForeignKey(System.Object,System.Object)">
            <summary>
            The foreign key {foreignKey} cannot be added to the entity type '{entityType}' because a foreign key on the same properties already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.DuplicateIndex(System.Object,System.Object)">
            <summary>
            The index {index} cannot be added to the entity type '{entityType}' because an index on the same properties already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.DuplicateKey(System.Object,System.Object)">
            <summary>
            The key {key} cannot be added to the entity type '{entityType}' because a key on the same properties already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ForeignKeyNotFound(System.Object,System.Object)">
            <summary>
            The foreign key {foreignKey} on entity type '{entityType}' could not be found. Ensure that the foreign key been added to the entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.IndexNotFound(System.Object,System.Object)">
            <summary>
            The index {index} on entity type '{entityType}' could not be found. Ensure that the index been added to the entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.KeyNotFound(System.Object,System.Object)">
            <summary>
            The key {key} on entity type '{entityType}' could not be found. Ensure that the key been added to the entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationToShadowEntity(System.Object,System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to entity type '{entityType}' because the target entity type '{targetType}' is defined in shadow state and navigations properties cannot point to shadow state entities.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.CollectionArgumentContainsNulls(System.Object)">
            <summary>
            The collection argument '{argumentName}' must not contain any null references.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.EntityTypeNotInRelationship(System.Object,System.Object,System.Object)">
            <summary>
            The specified type '{type}' is invalid. It should be either the dependent type '{dependentType}' or the principal type '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.DuplicateEntityType(System.Object)">
            <summary>
            The entity type '{entityType}' cannot be added to the model because an entity with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.UnsupportedAnnotationType(System.Object)">
            <summary>
            Annotations of type '{type}' are not supported. Only common simple .NET types are currently supported.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.DuplicateAnnotation(System.Object)">
            <summary>
            The annotation '{annotation}' cannot be added because an annotation with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.AnnotationNotFound(System.Object)">
            <summary>
            The annotation '{annotation}' was not found. Ensure that the annotation has been added.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.IncludeNotImplemented">
            <summary>
            The Include operator is not implemented by the current data store provider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.IncludeNonBindableExpression(System.Object)">
            <summary>
            The expression '{expression}' passed to the Include operator could not be bound.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.LogCompilingQueryModel(System.Object)">
            <summary>
            Compiling query model: '{queryModel}'
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.LogOptimizedQueryModel(System.Object)">
            <summary>
            Optimized query model: '{queryModel}'
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.LogCompiledQueryFunction">
            <summary>
            Compiled query expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.LogIncludingNavigation(System.Object)">
            <summary>
            Including navigation: '{navigation}'
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.LogTrackingQuerySources(System.Object)">
            <summary>
            Tracking query sources: [{querySources}]
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.CannotBeNullable(System.Object,System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entity}' cannot be marked as nullable/optional because the type of the property is '{propertyType}' which is not a nullable type. Any property can be marked as non-nullable/required, but only properties of nullable types can be marked as nullable/optional.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.RecursiveOnModelCreating">
            <summary>
            An attempt was made to use the model while it was being created. A DbContext instance cannot be used inside OnModelCreating in any way that makes use of the model that is being created.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.RecursiveOnConfiguring">
            <summary>
            An attempt was made to use the context while it is being configured. A DbContext instance cannot be used inside OnConfiguring since it is still being configured at this point.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.PropertyAddedExplicitly(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' could not be ignored because it has been explicitly added or is part of a key, foreign key or index that has been explicitly defined.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.PropertyIgnoredExplicitly(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot be added to entity type '{entityType}' because it has been explicitly ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.EntityAddedExplicitly(System.Object)">
            <summary>
            The  entity type '{entityType}' could not be ignored because it has been explicitly added or is referenced from a foreign key that has been explicitly defined.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.EntityIgnoredExplicitly(System.Object)">
            <summary>
            The entity type '{entityType}' could not be added because it has been explicitly ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.EntityTypeInUse(System.Object)">
            <summary>
            The entity type '{entityType}' cannot be removed because it is being referenced from a foreign key. All referencing foreign keys must be removed or redefined before the entity type can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ArgumentPropertyNull(System.Object,System.Object)">
            <summary>
            The property '{property}' of the argument '{argument}' cannot be null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationIgnoredExplicitly(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to entity type '{entityType}' because it has been explicitly ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.RelationshipCannotBeInverted">
            <summary>
            The principal and dependent ends of the relationship cannot be flipped once foreign key or principal key properties have been specified.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationAddedExplicitly(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' on entity type '{entityType}' could not be ignored because it has been explicitly added.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.InvalidEntityType(System.Object,System.Object)">
            <summary>
            The entity type '{type}' provided for the argument '{argumentName}' must be a reference type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.IntegerConfigurationValueFormatError(System.Object,System.Object)">
            <summary>
            The value for the configuration entry '{configurationKey}' is '{invalidValue}', but an integer is expected.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ConnectionStringNotFound(System.Object)">
            <summary>
            No connection string named '{connectionString}' could be found in configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.UnhandledBindingType(System.Object)">
            <summary>
            Unhandled binding type: '{type}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.UnhandledExpressionType(System.Object)">
            <summary>
            Unhandled expression type: '{type}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ReferencedShadowKey(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The key {key} on entity type '{entityType}' contains properties in shadow state - {shadowProperties} and it is referenced by the foreign key {foreignKey} from entity type '{referencingEntityType}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ShadowKey(System.Object,System.Object,System.Object)">
            <summary>
            The key {key} on entity type '{entityType}' contains properties in shadow state - {shadowProperties}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ForeignKeyValueGenerationOnAdd(System.Object,System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' has value generation on add enabled and it is included in the foreign key {foreignKey}. Foreign key properties should not have value generation on add enabled unless they are part of a cycle where they are the only properties with value generation on add enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.MultipleRootPrincipals(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The root principal property found by following to foreign key chain starting on entity type '{entityType}' with {firstForeignKey} is '{firstEntityType}'.'{firstRootProperty}', which is different from the root principal property found by following to foreign key chain starting with {secondForeignKey} - '{secondEntityType}'.'{secondRootProperty}'
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.PrincipalKeyNoValueGenerationOnAdd(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' does not have value generation on add enabled and it is principal by at least one foreign key. Properties referenced by foreign keys should have value generation on add enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ExpressionParameterizationException(System.Object)">
            <summary>
            An exception was thrown while attempting to evaluate the LINQ query parameter expression '{expression}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.InvalidValueGeneratorFactoryProperty(System.Object,System.Object,System.Object)">
            <summary>
            The '{factory}' cannot create a value generator for property '{property}' on entity type '{entityType}'. Only integer properties are supported.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.InvalidForDerivedEntity(System.Object,System.Object)">
            <summary>
            The entity type method '{method}' is not valid for derived type '{derivedType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.CircularInheritance(System.Object,System.Object)">
            <summary>
            The entity type '{entityType}' cannot inherit '{baseEntityType}' because '{baseEntityType}' is a descendent of '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.DerivedEntityCannotHaveKeys(System.Object)">
            <summary>
            Unable to set a base type for entity type '{entityType}' because it has one or more keys defined.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.GraphDoesNotContainVertex(System.Object)">
            <summary>
            The edge cannot be added because the graph does not contain vertex '{vertex}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.CannotMaterializeAbstractType(System.Object)">
            <summary>
            Unable to create an instance of type entity type '{entityType}' because it is abstract. Either make it non-abstract or consider mapping at least one derived type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.ForeignKeyReferencedEntityKeyMismatch(System.Object,System.Object)">
            <summary>
            The provided principal entity key '{principalKey}' is not a key on the entity type '{principalEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.NavigationToSelfDuplicate(System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be used for both ends of the relationship. Either specify it on the principal side or the dependent side.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.Strings.WrongGenericPropertyType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Property '{propertyName}' on entity type '{entityType}' is of type '{actualType}' but the generic type provided is of type '{genericType}'.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.Strings.NonGenericOptions">
            <summary>
            The DbContextOptions object registered in the service provider must be a DbContextOptions&lt;TContext&gt; where TContext is the type of the DbContext being used.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.EntityType.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.EntityType.#ctor(System.Type,Microsoft.Data.Entity.Metadata.Model)">
            <summary>
                Creates a new metadata object representing an entity type associated with the given .NET type.
            </summary>
            <param name="type">The .NET entity type that this metadata object represents.</param>
            <param name="model">The model associated with this entity type.</param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.EntityType.#ctor(System.String,Microsoft.Data.Entity.Metadata.Model)">
            <summary>
                Creates a new metadata object representing an entity type that will participate in shadow-state
                such that there is no underlying .NET type corresponding to this metadata object.
            </summary>
            <param name="name">The name of the shadow-state entity type.</param>
            <param name="model">The model associated with this entity type.</param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Index.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Key.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.PropertyBase.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on
                    an end of the relationship with a collection that contains instances of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure the relationship. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalRelationshipBuilder}#Service">
            <summary>
                Gets the internal builder being used to configure the relationship.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.InverseReference(System.String)">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.InverseReferenceBuilder(System.String)">
            <summary>
                Returns the internal builder to be used when <see cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.InverseReference(System.String)" /> is called.
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> The internal builder to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on
                    an end of the relationship with a collection that contains instances of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure the relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2.InverseReference(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="reference">
                A lambda expression representing the reference navigation property on the other end of this
                relationship (<c>t => t.Reference1</c>). If no property is specified, the relationship will be
                configured without a navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2.InverseReference(System.String)">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-many relationship.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalRelationshipBuilder}#Service">
            <summary>
                Gets the internal builder being used to configure this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder.Metadata">
            <summary>
                The foreign key that represents this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Model}#Service">
            <summary>
                The model that this relationship belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder.ForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder.PrincipalKey(System.String[])" /> is not specified, then an attempt will be made to match
                    the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder.PrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique index (or the primary key) then a new unique index
                will be introduced.
            </summary>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder.Required(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-many relationship.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.ForeignKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.PrincipalKey(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})" /> is not specified, then an
                    attempt will be made to match the data type and order of foreign key properties against the primary
                    key of the principal entity type. If they do not match, new shadow state properties that form a
                    unique
                    index will be added to the principal entity type to serve as the reference key.
                    A shadow state property is one that does not have a corresponding property in the entity class. The
                    current value for the property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being
                    stored in instances of the entity class.
                </para>
            </summary>
            <param name="foreignKeyExpression">
                <para>
                    A lambda expression representing the foreign key property(s) (<c>t => t.Id1</c>).
                </para>
                <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t => new { t.Id1, t.Id2 }</c>).
                    The order specified should match the order of corresponding keys in
                    <see cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.PrincipalKey(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})" />.
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.PrincipalKey(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique index (or the primary key) then a new unique index
                will be introduced.
            </summary>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the reference key property(s) (<c>t => t.Id</c>).
                </para>
                <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>t => new { t.Id1, t.Id2 }</c>).
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.ForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.PrincipalKey(System.String[])" /> is not specified, then an attempt will be made to match
                    the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.PrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique index (or the primary key) then a new unique index
                will be introduced.
            </summary>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionReferenceBuilder`2.Required(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.Data.Entity.Metadata.EntityType" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder" /> class to configure a given entity
                    type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the entity type being configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalEntityTypeBuilder}#Service">
            <summary>
                The internal builder being used to configure the entity type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Metadata">
            <summary>
                The entity type being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Model}#Service">
            <summary>
                The model that the entity type belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Key(System.String[])">
            <summary>
                Sets the properties that make up the primary key for this entity type.
            </summary>
            <param name="propertyNames"> The names of the properties that make up the primary key. </param>
            <returns> An object that can be used to configure the primary key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Property``1(System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the property to be configured. </typeparam>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Property(System.Type,System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
            </summary>
            <param name="propertyType"> The type of the property to be configured. </param>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Ignore(System.String)">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyName"> The name of then property to be removed from the entity type. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Index(System.String[])">
            <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
            <param name="propertyNames"> The names of the properties that make up the index. </param>
            <returns> An object that can be used to configure the index. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Reference(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.InverseCollection(System.String)" />
                    or <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.InverseReference(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Collection(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.InverseReference(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.Data.Entity.Metadata.EntityType" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1" /> class to configure a given
                    entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal typeBuilder for the entity type being configured. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same typeBuilder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Key(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Sets the properties that make up the primary key for this entity type.
            </summary>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the primary key property(s) (<c>t => t.Id1</c>).
                </para>
                <para>
                    If the primary key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t => new { t.Id1, t.Id2 }</c>).
                </para>
            </param>
            <returns> An object that can be used to configure the primary key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Returns an object that can be used to configure a property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>t => t.Property1</c>).
            </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to be ignored
                (<c>t => t.Property1</c>).
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
            <param name="indexExpression">
                <para>
                    A lambda expression representing the property(s) to be included in the index
                    (<c>t => t.Property1</c>).
                </para>
                <para>
                    If the index is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t => new { t.Property1, t.Property2 }</c>).
                </para>
            </param>
            <returns> An object that can be used to configure the index. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see
                        cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.InverseCollection(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})" />
                    or
                    <see
                        cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.InverseReference(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="reference">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>t => t.Reference1</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see
                        cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2.InverseReference(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="collection">
                A lambda expression representing the collection navigation property on this entity type that represents
                the relationship (<c>t => t.Collection1</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.Data.Entity.Metadata.Index" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalIndexBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder" /> class to configure a given index.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the index being configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalIndexBuilder}#Service">
            <summary>
                The internal builder being used to configure the index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.Metadata">
            <summary>
                The index being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Model}#Service">
            <summary>
                The model that the index belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the index. If an annotation with the key specified in
                <paramref name="annotation" />
                already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.Unique(System.Boolean)">
            <summary>
                Configures whether this index is unique (i.e. the value(s) for each instance must be unique).
            </summary>
            <param name="isUnique"> A value indicating whether this index is unique. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.Data.Entity.Metadata.Key" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalKeyBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder" /> class to configure a given key.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the key being configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalKeyBuilder}#Service">
            <summary>
                The internal builder being used to configure the key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.Metadata">
            <summary>
                The key being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Model}#Service">
            <summary>
                The model that the key belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the key. If an annotation with the key specified in
                <paramref name="annotation" />
                already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.Data.Entity.Metadata.Property" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder" /> class to configure a given
                    property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the property being configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalPropertyBuilder}#Service">
            <summary>
                The internal builder being used to configure the property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.Metadata">
            <summary>
                The property being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Model}#Service">
            <summary>
                The model that the property belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the property. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.Required(System.Boolean)">
            <summary>
                Configures whether this property must have a value assigned or whether null is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned null.
            </summary>
            <param name="isRequired"> A value indicating whether the property is required. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.MaxLength(System.Int32)">
            <summary>
                Configures the maximum length of data that can be stored in this property.
                Maximum length can only be set on array properties (including <see cref="T:System.String" /> properties).
            </summary>
            <param name="maxLength"> The maximum length of data allowed in the property. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.ConcurrencyToken(System.Boolean)">
            <summary>
                Configures whether this property should be used as a concurrency token. When a property is configured
                as a concurrency token the value in the data store will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the data store. If it has changed, an exception will be thrown and the
                changes will not be applied to the data store.
            </summary>
            <param name="isConcurrencyToken"> A value indicating whether this property is a concurrency token. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.GenerateValueOnAdd(System.Boolean)">
            <summary>
                Configures whether a value is generated for this property when a new instance of the entity type
                is added to a context. Data stores will typically register an appropriate
                <see cref="T:Microsoft.Data.Entity.ValueGeneration.ValueGenerator" /> to handle generating values. This functionality is typically
                used for key values and is switched on by convention.
            </summary>
            <param name="generateValue"> A value indicating whether a value should be generated. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.StoreComputed(System.Boolean)">
            <summary>
                Configures whether a value is generated for this property by the data store every time an
                instance of this entity type is saved (initial add and any subsequent updates).
            </summary>
            <param name="computed"> A value indicating whether a value is generated by the data store. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.UseStoreDefault(System.Boolean)">
            <summary>
                Configures whether a default value is generated for this property by the store when an instance
                of this entity type is saved and no value has been set.
            </summary>
            <param name="useDefault">
                A value indicating whether a default value is generated by the data store when no value is set.
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.Data.Entity.Metadata.Property" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder" /> class to configure a given
                    property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the property being configured. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the property. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.Required(System.Boolean)">
            <summary>
                Configures whether this property must have a value assigned or whether null is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned null.
            </summary>
            <param name="isRequired"> A value indicating whether the property is required. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.MaxLength(System.Int32)">
            <summary>
                Configures the maximum length of data that can be stored in this property.
                Maximum length can only be set on array properties (including <see cref="T:System.String" /> properties).
            </summary>
            <param name="maxLength"> The maximum length of data allowed in the property. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.ConcurrencyToken(System.Boolean)">
            <summary>
                Configures whether this property should be used as a concurrency token. When a property is configured
                as a concurrency token the value in the data store will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the data store. If it has changed, an exception will be thrown and the
                changes will not be applied to the data store.
            </summary>
            <param name="isConcurrencyToken"> A value indicating whether this property is a concurrency token. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.GenerateValueOnAdd(System.Boolean)">
            <summary>
                Configures whether a value is generated for this property when a new instance of the entity type
                is added to a context. Data stores will typically register an appropriate
                <see cref="T:Microsoft.Data.Entity.ValueGeneration.ValueGenerator" /> to handle generating values. This functionality is typically
                used for key values and is switched on by convention.
            </summary>
            <param name="generateValue"> A value indicating whether a value should be generated. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.StoreComputed(System.Boolean)">
            <summary>
                Configures whether a value is generated for this property by the data store every time an
                instance of this entity type is saved (initial add and any subsequent updates).
            </summary>
            <param name="computed"> A value indicating whether a value is generated by the data store. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.UseStoreDefault(System.Boolean)">
            <summary>
                Configures whether a default value is generated for this property by the store when an instance
                of this entity type is saved and no value has been set.
            </summary>
            <param name="useDefault">
                A value indicating whether a default value is generated by the data store when no value is set.
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-many relationship.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.Metadata">
            <summary>
                The foreign key that represents this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Model}#Service">
            <summary>
                The model that this relationship belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalRelationshipBuilder}#Service">
            <summary>
                Gets the internal builder being used to configure this relationship.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" />
                already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.ForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one that does not
                    have a corresponding property in the entity class. The current value for the  property is stored in
                    the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.PrincipalKey(System.String[])" /> is not specified, then an attempt will be made to match
                    the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.PrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique index (or the primary key) then a new unique index
                will be introduced.
            </summary>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.Required(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-many relationship.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.ForeignKey(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.PrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> is not specified, then an
                    attempt will be made to match the data type and order of foreign key properties against the primary
                    key of
                    the principal entity type. If they do not match, new shadow state properties that form a unique
                    index
                    will be added to the principal entity type to serve as the reference key.
                    A shadow state property is one that does not have a corresponding property in the entity class. The
                    current value for the property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being
                    stored in instances of the entity class.
                </para>
            </summary>
            <param name="foreignKeyExpression">
                <para>
                    A lambda expression representing the foreign key property(s) (<c>t => t.Id1</c>).
                </para>
                <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t => new { t.Id1, t.Id2 }</c>). The order specified should match the order of
                    corresponding keys in <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.PrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />.
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.PrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique index (or the primary key) then a new unique index
                will be introduced.
            </summary>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the reference key property(s) (<c>t => t.Id</c>).
                </para>
                <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>t => new { t.Id1, t.Id2 }</c>).
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.ForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.PrincipalKey(System.String[])" /> is not specified, then an attempt will be made to match
                    the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.PrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique index (or the primary key) then a new unique index
                will be introduced.
            </summary>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.Required(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on
                    an end of the relationship with a reference that points to an instance of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.#ctor(Microsoft.Data.Entity.Metadata.EntityType,System.String,Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="relatedEntityType"> The entity type that the reference points to. </param>
            <param name="navigationName">
                The name of the reference navigation property on the end of the relationship that configuration began
                on. If null, there is no navigation property on this end of the relationship.
            </param>
            <param name="builder"> The internal builder being used to configure the relationship. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.ReferenceName">
            <summary>
                Gets the name of the reference navigation property on the end of the relationship that
                configuration began on. If null, there is no navigation property on this end of the relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.RelatedEntityType">
            <summary>
                Gets the entity type that the reference points to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalRelationshipBuilder}#Service">
            <summary>
                Gets the internal builder being used to configure the relationship.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.InverseCollection(System.String)">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="collection">
                The name of the collection navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.InverseCollectionBuilder(System.String)">
            <summary>
                Returns the internal builder to be used when <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.InverseCollection(System.String)" /> is called.
            </summary>
            <param name="collection">
                The name of the collection navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> The internal builder to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.InverseReference(System.String)">
            <summary>
                Configures this as a one-to-one relationship.
            </summary>
            <param name="inverseReference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.InverseReferenceBuilder(System.String)">
            <summary>
                Returns the internal builder to be used when <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.InverseReference(System.String)" /> is called.
            </summary>
            <param name="inverseReferenceName">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> The internal builder to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on an end of the
                    relationship with a reference that points to an instance of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.EntityType,System.String,Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="relatedEntityType"> The entity type that the reference points to. </param>
            <param name="navigationName">
                The name of the reference navigation property on the end of the relationship that configuration began
                on. If null, there is no navigation property on this end of the relationship.
            </param>
            <param name="builder"> The internal builder being used to configure the relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.InverseCollection(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="collection">
                A lambda expression representing the collection navigation property on the other end of this
                relationship (<c>t => t.Collection1</c>). If no property is specified, the relationship will be
                configured without a navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.InverseReference(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures this as a one-to-one relationship.
            </summary>
            <param name="inverseReference">
                A lambda expression representing the reference navigation property on the other end of this
                relationship (<c>t => t.Reference1</c>). If no property is specified, the relationship will be
                configured without a navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.InverseCollection(System.String)">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="collection">
                The name of the collection navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-one relationship.
                </para>
                <para>
                    If multiple reference key properties are specified, the order of reference key properties should
                    match the order that the primary key or unique index properties were configured on the principal
                    entity type.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Internal#InternalRelationshipBuilder}#Service">
            <summary>
                Gets the internal builder being used to configure this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.Metadata">
            <summary>
                The foreign key that represents this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.Microsoft#Data#Entity#Infrastructure#IAccessor{Microsoft#Data#Entity#Metadata#Model}#Service">
            <summary>
                The model that this relationship belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.ForeignKey(System.Type,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.PrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityType">
                The entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.PrincipalKey(System.Type,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique index (or the primary key) then a new unique index
                will be introduced.
            </summary>
            <param name="principalEntityType">
                The entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.Required(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-one relationship.
                </para>
                <para>
                    If multiple reference key properties are specified, the order of reference key properties should
                    match the order that the primary key or unique index properties were configured on the principal
                    entity type.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.Annotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.ForeignKey(System.Type,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.PrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityType">
                The entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.PrincipalKey(System.Type,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique index (or the primary key) then a new unique index
                will be introduced.
            </summary>
            <param name="principalEntityType">
                The entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.ForeignKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.PrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
                    is not specified, then an attempt will be made to match the data type and order of foreign key
                    properties against the primary key of the principal entity type. If they do not match, new shadow
                    state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                    A shadow state property is one that does not have a corresponding property in the entity class. The
                    current value for the property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being
                    stored in instances of the entity class.
                </para>
            </summary>
            <typeparam name="TDependentEntity">
                The entity type that is the dependent in this relationship. That is, the type
                that has the foreign key properties.
            </typeparam>
            <param name="foreignKeyExpression">
                <para>
                    A lambda expression representing the foreign key property(s) (<c>t => t.Id1</c>).
                </para>
                <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t => new { t.Id1, t.Id2 }</c>). The order specified should match the order of
                    corresponding keys in <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.PrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />.
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.PrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique index (or the primary key) then a new unique index
                will be introduced.
            </summary>
            <typeparam name="TPrincipalEntity">
                The entity type that is the principal in this relationship. That is, the type
                that has the reference key properties.
            </typeparam>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the reference key property(s) (<c>t => t.Id</c>).
                </para>
                <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>t => new { t.Id1, t.Id2 }</c>).
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.Required(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Internal.ClrCollectionAccessorSource.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Internal.EntityMaterializerSource.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Internal.MemberMapper.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.DataStoreTransaction.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.HiLoValueGenerator`1">
            <summary>
                Acts as a <see cref="T:Microsoft.Data.Entity.ValueGeneration.ValueGenerator" />  by requesting a block of values from the
                underlying data store and returning them one by one. Will ask the underlying
                data store for another block when the current block is exhausted.
            </summary>
        </member>
        <member name="T:Microsoft.Framework.DependencyInjection.EntityFrameworkServiceCollectionExtensions">
            <summary>
                Extension methods for setting up Entity Framework related services in an <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Framework.DependencyInjection.IServiceCollection)">
            <summary>
                Adds the services required by the core of Entity Framework to an <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
            <remarks>
                <para>
                    You only need to use this functionality when you want Entity Framework to resolve the services it uses
                    from an external <see cref="T:System.IServiceProvider" />. If you are not using an external
                    <see cref="T:System.IServiceProvider" /> Entity Framework will take care of creating the services it requires.
                </para>
                <para>
                    The data store you are using will also define extension methods that can be called on the returned
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder" /> to register the services for the data store. For example,
                    when using EntityFramework.SqlServer you would call
                    <c>collection.AddEntityFramework().UseSqlServer(connectionString)</c>.
                </para>
                <para>
                    For derived contexts to resolve their services from the <see cref="T:System.IServiceProvider" /> you must chain a call
                    to the <see cref="M:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder.AddDbContext``1(System.Action{Microsoft.Data.Entity.DbContextOptionsBuilder})" /> method on the returned
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder" />.
                    This will ensure services are resolved from the <see cref="T:System.IServiceProvider" />  will be honored.
                </para>
            </remarks>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" /> to add services to. </param>
            <returns>
                A builder that allows further Entity Framework specific setup of the <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether a sequence contains any elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to check for being empty.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified
                predicate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if every element of the source sequence passes the test in the specified
                predicate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the number of elements in a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence
                that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if
                <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the first
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the last element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the last element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if
                <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the last
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence, and throws an exception
                if there is not exactly one element in the sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition,
                and throws an exception if more than one such element exists.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence that satisfies the condition in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
                this method throws an exception if there is more than one element in the sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence, or <c>default</c> (
                <typeparamref name="TSource" />)
                if the sequence contains no elements.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition or
                a default value if no such element exists; this method throws an exception if more than one element
                satisfies the condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence that satisfies the condition in
                <paramref name="predicate" />, or <c>default</c> ( <typeparamref name="TSource" /> ) if no such element is found.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the minimum value of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the minimum value in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TResult">
                The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the minimum value in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the maximum value of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the maximum value in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TResult">
                The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the maximum value in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="item"> The object to locate in the sequence. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a list from.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates an array from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create an array from.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains an array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})">
            <summary>
                Provides an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that allows asynchronous enumeration
                of the query. This method is typically not used in application code. <see cref="M:System.Linq.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)" />
                provides a simple way to asynchronously enumerate the results of a query.
            </summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> from.
            </param>
            <returns>
                An object to asynchronously enumerate the results.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
                <para>
                    Returns a new query where the entities returned in the result set will not be tracked
                    by the context.
                </para>
                <para>
                    No tracking is designed to be used as a performance optimization when working with
                    result sets where changes to the entity instances will not be persisted by
                    the context they were queries with. This includes disconnected scenarios (such as
                    web services) and read-only data.
                </para>
                <para>
                    Identity resolution will still be performed to ensure
                    that all occurrences of an entity with a given key in the result set are represented by
                    the same entity instance.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <returns> 
                A new query where the result set will not be tracked by the context. 
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})">
            <summary>
                Enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
            <param name="source"> The source query. </param>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
            <param name="source"> The source query. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function and a comparer.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:System.Linq.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="T">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
            <param name="action"> The action to perform on each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="T:System.Threading.Tasks.EntityFrameworkTaskExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.Threading.Tasks.Task" /> class.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})">
            <summary>
                Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" /> to avoid
                marshalling the continuation back to the original context, but preserve the
                current culture and UI culture.
            </summary>
            <remarks> Calling this has no effect on platforms that don't use <see cref="T:System.Threading.SynchronizationContext" />. </remarks>
            <typeparam name="T">
                The type of the result produced by the associated <see cref="T:System.Threading.Tasks.Task`1" />.
            </typeparam>
            <param name="task">The task to be awaited on.</param>
            <returns>An object used to await this task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)">
            <summary>
                Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" /> to avoid
                marshalling the continuation back to the original context, but preserve the
                current culture and UI culture.
            </summary>
            <remarks> Calling this has no effect on platforms that don't use <see cref="T:System.Threading.SynchronizationContext" />. </remarks>
            <param name="task">The task to be awaited on.</param>
            <returns>An object used to await this task.</returns>
        </member>
        <member name="T:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter`1">
            <summary>
                Provides an awaitable object that allows for awaits on <see cref="T:System.Threading.Tasks.Task`1" /> that
                preserve the culture.
            </summary>
            <typeparam name="T">
                The type of the result produced by the associated <see cref="T:System.Threading.Tasks.Task`1" />.
            </typeparam>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
                Constructs a new instance of the <see cref="T:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter`1" /> class.
            </summary>
            <param name="task">The task to be awaited on.</param>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter`1.GetAwaiter">
            <summary>Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
            <returns>An awaiter instance.</returns>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter`1.IsCompleted">
            <summary>
                Gets whether this <see cref="T:System.Threading.Tasks.Task">Task</see> has completed.
            </summary>
            <remarks>
                <see cref="P:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter`1.IsCompleted" /> will return true when the Task is in one of the three
                final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion">RanToCompletion</see>,
                <see cref="F:System.Threading.Tasks.TaskStatus.Faulted">Faulted</see>, or
                <see cref="F:System.Threading.Tasks.TaskStatus.Canceled">Canceled</see>.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter`1.GetResult">
            <summary>Ends the await on the completed <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
            <returns>The result of the completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
            <exception cref="T:System.Exception">The task completed in a Faulted state.</exception>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter`1.OnCompleted(System.Action)">
            <summary>This method is not implemented and should not be called.</summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter`1.UnsafeOnCompleted(System.Action)">
            <summary>
                Schedules the continuation onto the <see cref="T:System.Threading.Tasks.Task`1" /> associated with this
                <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" />.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="continuation" /> argument is null
                (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.InvalidOperationException">The awaiter was not properly initialized.</exception>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter">
            <summary>
                Provides an awaitable object that allows for awaits on <see cref="T:System.Threading.Tasks.Task" /> that
                preserve the culture.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter.#ctor(System.Threading.Tasks.Task)">
            <summary>
                Constructs a new instance of the <see cref="T:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter" /> class.
            </summary>
            <param name="task">The task to be awaited on.</param>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter.GetAwaiter">
            <summary>Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</summary>
            <returns>An awaiter instance.</returns>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter.IsCompleted">
            <summary>
                Gets whether this <see cref="T:System.Threading.Tasks.Task">Task</see> has completed.
            </summary>
            <remarks>
                <see cref="P:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter.IsCompleted" /> will return true when the Task is in one of the three
                final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion">RanToCompletion</see>,
                <see cref="F:System.Threading.Tasks.TaskStatus.Faulted">Faulted</see>, or
                <see cref="F:System.Threading.Tasks.TaskStatus.Canceled">Canceled</see>.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter.GetResult">
            <summary>Ends the await on the completed <see cref="T:System.Threading.Tasks.Task" />.</summary>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
            <exception cref="T:System.Exception">The task completed in a Faulted state.</exception>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter.OnCompleted(System.Action)">
            <summary>This method is not implemented and should not be called.</summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:System.Threading.Tasks.EntityFrameworkTaskExtensions.CultureAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
                Schedules the continuation onto the <see cref="T:System.Threading.Tasks.Task" /> associated with this
                <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" />.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="continuation" /> argument is null
                (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.InvalidOperationException">The awaiter was not properly initialized.</exception>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
    </members>
</doc>
